openapi: 3.0.3
info:
  title: Colladocs API 0.1
  description: >
    Imagine an **API** that effortlessly connects your app to a robust document management system, simplifying everything from **document storage** to **real-time collaboration**. Our project offers a seamless backend solution, allowing you to focus on building incredible user experiences while we handle the complex tasks behind the scenes.<br><br>
    
    With a few simple **[API calls](#)**, you can:<br>
    - Authenticate users and manage their profiles securely.<br>
    - Create, organize, and structure documents with **smart folders** that support nested paths.<br>
    - Store and retrieve content like **text**, **images**, **code**, or **videos** via flexible endpoints.<br><br>

    Our API doesn’t just store data—it empowers collaboration. You can assign user roles such as _editor_, _viewer_, or _contributor_, track document changes, and even manage **[real-time connections](#)** to ensure everyone stays on the same page.<br><br>
    
    **Why should you care?** Because we take care of data validation, role management, and security so that you can concentrate on scaling your app, without worrying about backend chaos. From content creation to multi-user contributions, it’s all handled smoothly through our API.<br><br>
    
    Your app’s users deserve a seamless experience, and with our API, you can deliver just that. It’s time to unlock the potential of smarter document management—**[start integrating today](#)**!<br>
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: N/A


tags:
  - name: user
    description: Operations related to users

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged-in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid email/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged-in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{email}:
    get:
      tags:
        - user
      summary: Get user by email
      description: ''
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          description: 'The email that needs to be fetched. Use a valid email for testing.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged-in user.
      operationId: updateUser
      parameters:
        - name: email
          in: path
          description: email that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The email that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid email supplied
        '404':
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        join_date:
          type: string
          format: date-time
          example: '2024-10-17T12:00:00Z'
        last_login_date:
          type: string
          format: date-time
          example: '2024-10-17T12:00:00Z'
        subscription_type:
          type: integer
          example: 1
        max_documents:
          type: integer
          example: 5
        max_document_size:
          type: integer
          example: 10000
      required:
        - email
        - password
        - join_date
        - subscription_type
        - max_documents
        - max_document_size
      xml:
        name: user
